import java.text.SimpleDateFormat

plugins {
    id 'java-gradle-plugin'
    id 'groovy'
    id 'maven-publish'
    id 'java'
}

group groupName
version versionNumber

task updateVersion {
    Properties props = new Properties()
    InputStream ins = new FileInputStream(file("gradle.properties"))
    props.load(ins)

    ant.replaceregexp(
            match: 'V[0-9]{2}[.][0-9]{2}[.][0-9]{2}',
            replace: props.getProperty("versionNumber"),
            flags: 'g',
            byline: true) {

        fileset(
                dir: '.',
                includes: 'README.rst'
        )
        fileset(
                dir: '.',
                includes: 'Makefile'
        )
        fileset(
                dir: 'src/main/java/vt/edu/gradleguard/core',
                includes: 'Utils.java'
        )
    }
}

task updateCopyRightYear {
    Properties props = new Properties()
    InputStream ins = new FileInputStream(file("gradle.properties"))
    props.load(ins)

    SimpleDateFormat year = new SimpleDateFormat("yyyy")

    ant.replaceregexp(
            match: 'Copyright © [0-9]{4} GradleGuard',
            replace: 'Copyright © ' + year.format(new Date()) + ' GradleGuard',
            flags: 'g',
            byline: true) {

        fileset(
                dir: '.',
                includes: '*.rst'
        )
    }
}

build.dependsOn(updateVersion)
build.dependsOn(updateCopyRightYear)

publishing {
    publications {

        pluginMaven(MavenPublication) {
            groupId = groupName
            artifactId = projectName
            version = versionNumber

            pom {
                name = "Gradleguard"
                description = "The gradle plugin for Cryptoguard"
                url = "https://www.github.com/franceme/gradleguard"
                licenses {
                    license {
                        name = "GNU General Public License v3.0"
                        url = "https://www.gnu.org/licenses/gpl-3.0.html"
                    }
                }
                developers {
                    developer {
                        id = "franceme"
                    }
                }
                scm {
                    connection = "git@github.com:franceme/gradleguard"
                    developerConnection = "git@github.com:franceme/gradleguard"
                    url = "https://www.github.com/franceme/gradleguard"
                }
            }
            //Removing the Cryptoguard from the pom
            //Done since it's loaded in with the Uber-Jar and otherwise breaks the generated pom file
            pom.withXml {
                asNode().dependencies.dependency.each { dep ->
                    if (dep.artifactId.last().value().last() in ["cryptoguard"]) {
                        assert dep.parent().remove(dep)
                    }
                }
            }
        }
    }
    repositories {
        // Just to get it started working
        //mavenLocal()
        //maven {
        //    url = "$buildDir/repo"
        //}
	maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/franceme/gradleguard")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GPR_USER")
                password = project.findProperty("gpr.key") ?: System.getenv("GPR_API_KEY")
            }
        }
    }
}

repositories {
    mavenCentral()
    flatDir {
        dirs 'libs'
    }
}

//Creating the Uber Jar
jar {
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

dependencies {
    //Used for the plugin class
    implementation gradleApi()

    //For using the groovy files
    implementation localGroovy()

    testImplementation('org.junit.jupiter:junit-jupiter:5.5.2')

    compile name: 'cryptoguard'
}
test {
    useJUnitPlatform()
}

//The entry point, like the MANIFEST file for jar
gradlePlugin {
    plugins {
        simplePlugin {
            id = 'vt.edu.gradleguard.plugin'
            implementationClass = 'vt.edu.gradleguard.GradleGuardPlugin'
        }
    }
}
