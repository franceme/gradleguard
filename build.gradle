import java.text.SimpleDateFormat
// import java.util.Scanner
// import java.util.regex.Pattern
// import java.util.regex.Matcher

plugins {
    id 'java-gradle-plugin'
    id 'groovy'
    id 'maven-publish'
    id 'java'

}

group groupName
version versionNumber

// String[] splitIntoTokens(String commandLine) {
//     String regex = "(([\"']).*?\\2|(?:[^\\\\ ]+\\\\\\s+)+[^\\\\ ]+|\\S+)";
//     Matcher matcher = Pattern.compile(regex).matcher(commandLine);
//     ArrayList<String> result = new ArrayList<>();
//     while (matcher.find()) {
//         result.add(matcher.group());
//     }
//     return result.toArray();   
// }

task flag {
    if (project.hasProperty("-o"))
    {
        // args += '-o'
        String var =  project.getProperty('-o')
        println "-o " + var
    }
    if (project.hasProperty("-new"))
    {
        // args += '-new'
        String var =  project.getProperty('-new')
        println "-new " + var
    }
    if (project.hasProperty("-t"))
    {
        // args += '-t'
        String var =  project.getProperty('-t')
        println "-t " + var
    }
    if (project.hasProperty("-m"))
    {
        // args += '-m'
        String var =  project.getProperty('-m')
        println "-m " + var
    }
    if (project.hasProperty("-n"))
    {
        // args += '-n'
        String var =  project.getProperty('-n')
        println "-n " + var
    }
    if (project.hasProperty("-exp"))
    {
        // args += '-exp'
        String var =  project.getProperty('-exp')
        println "-exp " + var
    }
    if (project.hasProperty("-V"))
    {
        // args += '-V'
        String var =  project.getProperty('-V')
        println "-V " + var
    }
    if (project.hasProperty("-vx"))
    {
        // args += '-vx'
        String var =  project.getProperty('-vx')
        println "-vx " + var
    }
    if (project.hasProperty("-v"))
    {
        // args += '-v'
        String var =  project.getProperty('-v')
        println "-v " + var
    }
    if (project.hasProperty("-vv"))
    {
        // args += '-vv'
        String var =  project.getProperty('-vv')
        println "-vv " + var
    }
    if (project.hasProperty("-ts"))
    {
        // args += '-ts'
        String var =  project.getProperty('-ts')
        println "-ts " + var
    }
    if (project.hasProperty("-depth"))
    {
        // args += '-depth'
        String var =  project.getProperty('-depth')
        println "-depth " + var
    }
    if (project.hasProperty("-L"))
    {
        // args += '-L'
        String var =  project.getProperty('-L')
        println "-L " + var
    }
    if (project.hasProperty("-java"))
    {
        // args += '-java'
        String var =  project.getProperty('-java')
        println "-java " + var
    }
    if (project.hasProperty("-android"))
    {
        // args += '-android'
        String var =  project.getProperty('-android')
        println "-android " + var
    }
    if (project.hasProperty("-H"))
    {
        // args += '-H'
        String var =  project.getProperty('-H')
        println "-H " + var
    }
    if (project.hasProperty("-st"))
    {
        // args += '-st'
        String var =  project.getProperty('-st')
        println "-st " + var
    }
    if (project.hasProperty("-h"))
    {
        // args += '-h'
        String var =  project.getProperty('-h')
        println "-h " + var
    }
    if (project.hasProperty("-main"))
    {
        // args += '-main'
        String var =  project.getProperty('-main')
        println "-main " + var
    }
}

task updateVersion {
    Properties props = new Properties()
    InputStream ins = new FileInputStream(file("gradle.properties"))
    props.load(ins)

    ant.replaceregexp(
            match: 'V[0-9]{2}[.][0-9]{2}[.][0-9]{2}',
            replace: props.getProperty("versionNumber"),
            flags: 'g',
            byline: true) {

        fileset(
                dir: '.',
                includes: 'README.rst'
        )
        fileset(
                dir: '.',
                includes: 'Makefile'
        )
        fileset(
                dir: 'src/main/java/vt/edu/gradleguard/core',
                includes: 'Utils.java'
        )
    }
}

task updateCopyRightYear {
    Properties props = new Properties()
    InputStream ins = new FileInputStream(file("gradle.properties"))
    props.load(ins)

    SimpleDateFormat year = new SimpleDateFormat("yyyy")

    ant.replaceregexp(
            match: 'Copyright © [0-9]{4} GradleGuard',
            replace: 'Copyright © ' + year.format(new Date()) + ' GradleGuard',
            flags: 'g',
            byline: true) {

        fileset(
                dir: '.',
                includes: '*.rst'
        )
    }
}

build.dependsOn(updateVersion)
build.dependsOn(updateCopyRightYear)

publishing {
    publications {

        pluginMaven(MavenPublication) {
            groupId = groupName
            artifactId = projectName
            version = versionNumber

            pom {
                name = "Gradleguard"
                description = "The gradle plugin for Cryptoguard"
                url = "https://www.github.com/franceme/gradleguard"
                licenses {
                    license {
                        name = "GNU General Public License v3.0"
                        url = "https://www.gnu.org/licenses/gpl-3.0.html"
                    }
                }
                developers {
                    developer {
                        id = "franceme"
                    }
                }
                scm {
                    connection = "git@github.com:franceme/gradleguard"
                    developerConnection = "git@github.com:franceme/gradleguard"
                    url = "https://www.github.com/franceme/gradleguard"
                }
            }
            //Removing the Cryptoguard from the pom
            //Done since it's loaded in with the Uber-Jar and otherwise breaks the generated pom file
            pom.withXml {
                asNode().dependencies.dependency.each { dep ->
                    if (dep.artifactId.last().value().last() in ["cryptoguard"]) {
                        assert dep.parent().remove(dep)
                    }
                }
            }
        }
    }
    repositories {
        // Just to get it started working
        mavenLocal()
        maven {
           url = "$buildDir/repo"
        }
	// maven {
    //         name = "GitHubPackages"
    //         url = uri("https://maven.pkg.github.com/franceme/gradleguard")
    //         credentials {
    //             username = project.findProperty("gpr.user") ?: System.getenv("GPR_USER")
    //             password = project.findProperty("gpr.key") ?: System.getenv("GPR_API_KEY")
    //         }
    //     }
    }
}

repositories {
    mavenCentral()
    flatDir {
        dirs 'libs'
    }
}

//Creating the Uber Jar
jar {
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
        zip64=true
}

dependencies {
    //Used for the plugin class
    implementation gradleApi()

    //For using the groovy files
    implementation localGroovy()
    //compile 'GROUP:NAME:VERSION'
    //testImplementation('org.junit.jupiter:junit-jupiter:5.5.2')

    compile name: 'cryptoguard'
}
test {
    //useJUnitPlatform()
}

//The entry point, like the MANIFEST file for jar
gradlePlugin {
    plugins {
        simplePlugin {
            id = 'vt.edu.gradleguard.plugin'
            implementationClass = 'vt.edu.gradleguard.GradleGuardPlugin'
        }
    }
}
